# Demo for painting
#
# Bitmap Display Configuration:
# - Unit width in pixels: 8
# - Unit height in pixels: 8
# - Display width in pixels: 256
# - Display height in pixels: 256
# - Base Address for Display: 0x10008000 ($gp)
#
.data
displayAddress: .word 0x10008000
frogLocation: .word 3648
initialCarPosition: .word 
intialLogPosition: .word 
carRow1: .word 0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A
carRow2: .word 0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0xC10303,0x3A3A3A,0x3A3A3A,0x3A3A3A,0x3A3A3A
logRow1: .word 0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E
logRow2: .word 0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0xCC5C3E,0x00F0FF,0x00F0FF,0x00F0FF,0x00F0FF
.text


main:
	
	lw $a3, frogLocation
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $a3, 0($sp)
	Redraw:
	jal drawScreen




	j Exit

drawScreen:
	#draw backgoround
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	jal drawBackground
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	lw $ra, 0($sp) # pop frog location and 
	addi $sp, $sp, 4
	
	#draw frog
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	
	jal drawFrog
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	jal drawAllCars
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	jal drawAllLogs
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	jr $ra

drawBackground:

	lw $t0, displayAddress # $t0 stores the base address for display
	li $t1, 0xE5D14F # $t1 stores the mud colour code
	li $t2, 0x62ED08 # $t2 stores the green colour code
	li $t3, 0x00F0FF  # $t3 stores the blue colour code
	li $t6, 0x3A3A3A # $t6 stores the gray color
	li $t4, 4 #increment position by 4
	li $t5, 0 #pixel position

	paintSafe: 
	sw $t2,0($t0)
	add $t0, $t0, $t4
	add $t5, $t5, $t4 #increment pixel position
	beq $t5, 1024, paintWaterUp
	j paintSafe

	paintWaterUp:
	sw $t3,0($t0)
	add $t0, $t0, $t4
	add $t5, $t5, $t4 #increment pixel position
	beq $t5, 2048, paintMiddleGround
	j paintWaterUp

	paintMiddleGround:
	sw $t1,0($t0)
	add $t0, $t0, $t4
	add $t5, $t5, $t4 #increment pixel position
	beq $t5, 2560, paintRoad
	j paintMiddleGround

	paintRoad:
	sw $t6, 0($t0)
	add $t0, $t0, $t4
	add $t5, $t5, $t4 #increment pixel position
	beq $t5, 3584, paintStart
	j paintRoad

	paintStart:
	sw $t2,0($t0)
	add $t0, $t0, $t4
	add $t5, $t5, $t4 #increment pixel position
	beq $t5, 4096, resetDP
	j paintStart

	resetDP:
	lw $t0, displayAddress 
	jr $ra


drawFrog:
	li $t8, 0xFF0080
	lw $a0, 0($sp) # pop frog coordinte parameter
	addi $sp, $sp, 4 # increase length of stack
	add $t0, $t0, $a0 # jump to position
	
	li $t1, 0 # horizontal counter
	li $t2, 0 # vertical counter
	FrogLoop: # create frog shape, square for now
	sw $t8, 0($t0) # create a row
	addi $t1, $t1, 4
	addi $t0, $t0, 4
	beq $t1, 16, nextRow
	j FrogLoop
	nextRow:
	add $t0, $t0, 112 # jump to next row and repeat
	li $t1, 0
	add $t2, $t2, 1
	beq $t2, 4, finish
	j FrogLoop
	
	finish:
	lw $t0, displayAddress #reset displayAddress to original value
	jr $ra

drawRow: # takes in an array of 32 colors and the starting position of the row
	add $t0, $t0, $a0 # jump to position
	
	loopInit:
	li $t4, 0 # t4 hold 4*i, intially at 0
	li $t5, 128
	
	rowLoop:
	bge, $t4, $t5, rowLoopEnd
	add $t3, $a1, $t4 #stores the address of a1[i]
	lw $t9, 0($t3) #contains the color to be painted
	
	sw $t9, 0($t0)
	addi $t0, $t0, 4 #increment position 
	addi $t4, $t4, 4 #incrememnt offset counter
	j rowLoop
	rowLoopEnd:
	lw $t0, displayAddress #reset displayAddress to original value
	jr $ra
	

drawAllCars:
	#draw the first row of cars 
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	la $a1, carRow1
	li $a0, 2560
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 2688
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 2816
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 2944
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	#draw the second row of cars
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	la $a1, carRow2
	li $a0, 3072
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 3200
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 3328
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 3456
	jal drawRow	
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	jr $ra
	
drawAllLogs:
	#draw the first row of cars 
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	la $a1, logRow1
	li $a0, 1024
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 1152
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 1280
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 1408
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	#draw the second row of cars
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	la $a1, logRow2
	li $a0, 1536
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 1664
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 1792
	jal drawRow
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	addi $sp, $sp, -4 # move stack pointer one word and store ra
	sw $ra, 0($sp)
	li $a0, 1920
	jal drawRow	
	lw $ra, 0($sp) # restore ra from stack
	addi $sp, $sp, 4
	
	jr $ra
	
	
	

Exit:
li $v0, 10 # terminate the program gracefully
syscall

